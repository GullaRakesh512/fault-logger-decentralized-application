A Blockchain-Based Approach to Fault Detection and Logging in Power Systems
1. Introduction

Modern power systems rely on accurate and timely fault detection to ensure stability, reliability, and safety. Traditional fault logging systems, however, often face significant challenges due to their centralized architecture. These systems are vulnerable to single points of failure and data tampering, which can compromise system uptime and the trustworthiness of fault records for critical events like overcurrents, short circuits, and voltage fluctuations. As power grids become more complex, issues of scalability and the high costs of maintaining centralized databases become increasingly prominent.

To address these limitations, this project proposes a decentralized fault detection and logging system built on blockchain technology. Blockchain offers a distributed, immutable, and transparent ledger that can fundamentally change how fault data is recorded and managed. By leveraging this technology, the system creates a secure, tamper-proof, and resilient record of all fault events, ensuring accountability and trust. This approach not only enhances data integrity but also provides a scalable and transparent solution for monitoring large-scale power systems.

2. Project Objectives

The primary goal of this project was to design, develop, and test a proof-of-concept for a blockchain-based fault detection and logging system. The specific objectives were:

To design and deploy a secure smart contract on the Ethereum blockchain using the Solidity programming language to handle the logic of fault logging.

To create a Python-based interface to facilitate seamless interaction between the power system's monitoring components and the deployed smart contract.

To conduct end-to-end testing of the entire system to validate its functionality, reliability, and performance in a simulated environment.

3. Methodology

The system's architecture integrates a simulated power system, a Python application acting as a middleware, and a Solidity smart contract deployed on the Ethereum blockchain. The development stack specifically utilized Solidity for the smart contract, Hardhat for a local testing environment, and Web3.py for the Python-based grid integration.

3.1. Smart Contract Development
The core of the system is a smart contract developed in Solidity, designed to be the authoritative and immutable ledger for all fault data. It includes functions to securely store critical fault parameters such as the Bus ID, fault type (e.g., Overcurrent, Overload), measured current value, and a precise timestamp. To optimize for gas efficiency, numerical data like current values are stored as uint256.

Key features of the smart contract include:

Configurable Thresholds: The contract includes a configurable current threshold (with a default of 100A) to automatically detect overcurrent events.

Permissioned Functions: Access controls are implemented to allow only authorized operators to update critical system parameters like the fault threshold, enhancing security.

Event Logging: The contract emits events upon successful fault logging. This allows for efficient off-chain monitoring and enables real-time alerts and dashboard updates without constantly querying the blockchain.

Data Integrity: Once a fault is recorded, it cannot be altered or deleted. Each entry is also tied to the reporter's address, ensuring non-repudiation.

The development process utilized the Hardhat environment for iterative development, allowing for rigorous unit tests of each function to verify correct data handling and manage edge cases before deployment.

3.2. Python Interface Implementation
A Python interface was developed to bridge the gap between the power system sensors and the blockchain. Using the Web3.py library, this interface establishes a secure connection to the Ethereum network via an HTTP provider. Its primary role is to listen for fault data from the power system, which was simulated as a 3-bus system also designed in Python.

When a fault is detected (i.e., a current measurement exceeds the predefined threshold), the Python application formats the data, signs a transaction with the appropriate cryptographic keys, and submits it to the smart contract. The interface abstracts complex blockchain interactions, such as gas estimation and transaction receipt handling, into simpler functions. This automates the logging of faults in real-time and includes a full-featured API for querying the fault history, generating reports, or triggering automated maintenance workflows.

4. System Workflow and Results

The operational flow of the system is a clear sequence of events:

Fault Detection: The power system's sensors monitor electrical parameters. When a fault, such as an overload, is detected, the relevant data (Bus ID: Bus1, Fault Type: Overload, Current: 1000A, Timestamp) is captured.

Data Transmission: This data is sent to the Python application.

Smart Contract Interaction: The Python application invokes the addFault() function on the smart contract, passing the fault details as parameters.

Blockchain Transaction: The smart contract executes the function, creating a transaction that permanently records the fault data on the blockchain. A transaction receipt, including a unique hash (e246f1...), is returned to confirm the successful logging of the event.

Data Retrieval: At any time, the Python application can call a getFaultCount() or similar function to retrieve the total number of logged faults or query the complete fault history for analysis.

Testing demonstrated the successful implementation of this workflow. Faults simulated in the 3-bus power system model were accurately detected, transmitted, and immutably logged on the blockchain, providing a verifiable and tamper-proof audit trail.

5. Benefits of the Blockchain-Based System

This decentralized approach offers several key advantages over traditional systems:

Enhanced Reliability and Fault Tolerance: By eliminating a single point of failure, the distributed nature of the blockchain ensures that the fault logging system remains operational even if individual nodes go offline.

Tamper-Proof Data Integrity: The cryptographic principles of blockchain guarantee that once a fault is recorded, it cannot be altered, providing a trustworthy source of data for regulatory compliance and forensic analysis.

Improved Operational Efficiency: The automation of the logging process streamlines fault management, reducing administrative overhead and lowering operational costs.

Increased Security: The system is inherently more secure against both external attacks and insider threats, as no single entity has control over the historical data.

6. Conclusion

This project successfully demonstrates the viability and significant benefits of applying blockchain technology to fault detection and logging in power systems. By creating an immutable, transparent, and decentralized system, this solution effectively addresses the core weaknesses of traditional, centralized architectures. The combination of a secure Solidity smart contract and an efficient Python interface provides a robust framework for integrating blockchain into existing power system infrastructures.

While the implementation incurs transaction costs (gas fees) inherent to blockchain networks, the unparalleled gains in data integrity, security, and reliability present a compelling case for its adoption in critical infrastructure applications. This project serves as a foundational step toward building more resilient, trustworthy, and efficient power grids.

7. Future Work

Building upon this successful proof-of-concept, future development could explore several promising avenues:

Integration with IoT: Deploying a distributed network of IoT sensors could further enhance the granularity and speed of fault detection.

Predictive Maintenance: Integrating artificial intelligence and machine learning algorithms could enable the system to analyze fault data patterns and predict potential equipment failures before they occur.

Cross-Organizational Data Sharing: The platform could be expanded to allow for secure and transparent fault data sharing between different utility companies or grid operators, improving regional grid stability.
